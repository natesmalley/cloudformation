AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Purple – Core VPC (converted 1-for-1 from Terraform module).

###############################################################################
# Parameters – mirrors variables.tf
###############################################################################
Parameters:
  NamePrefix:                { Type: String,  Default: purple }
  VpcCidr:                   { Type: String,  Default: 10.0.0.0/16 }

  PublicSubnetCidrs:
    Type: CommaDelimitedList
    Default: 10.0.1.0/24,10.0.2.0/24
    Description: "CIDRs for public subnets (match AZ list order)."

  AvailabilityZones:
    Type: CommaDelimitedList
    Default: us-east-2a,us-east-2b
    Description: "AZs for each public subnet."

  CreateIgw:                 { Type: String, AllowedValues: [true,false], Default: true }

  EnableFlowLogs:            { Type: String, AllowedValues: [true,false], Default: true }
  FlowLogsRetentionDays:     { Type: Number, Default: 30 }

  EnableDnsHostnames:        { Type: String, AllowedValues: [true,false], Default: true }
  EnableDnsSupport:          { Type: String, AllowedValues: [true,false], Default: true }

  ClusterName:
    Type: String
    Default: ""
    Description: "When supplied, adds kubernetes.io tags to subnets."

  Tags:
    Type: Json
    Default: "{}"
    Description: "Free-form tag map merged onto every resource."

###############################################################################
# Conditions
###############################################################################
Conditions:
  UseFlowLogs:    !Equals [ !Ref EnableFlowLogs, "true" ]
  HasClusterName: !Not   [ !Equals [ !Ref ClusterName, "" ] ]
  CreateIgwCond:  !Equals [ !Ref CreateIgw, "true" ]

###############################################################################
# Resources
###############################################################################

# VPC
VPC:
  Type: AWS::EC2::VPC
  Properties:
    CidrBlock: !Ref VpcCidr
    EnableDnsHostnames: !Ref EnableDnsHostnames
    EnableDnsSupport:   !Ref EnableDnsSupport
    Tags:
      - Key: Name
        Value: !Sub "${NamePrefix}-vpc"
      - Fn::If:
        - HasClusterName
        - { Key: !Sub "kubernetes.io/cluster/${ClusterName}", Value: shared }
        - { Ref: "AWS::NoValue" }
      - Fn::ImportValue: !Ref Tags   # merges caller-supplied tag map

# Internet Gateway (optional) + attachment
InternetGateway:
  Condition: CreateIgwCond
  Type: AWS::EC2::InternetGateway

IgwAttachment:
  Condition: CreateIgwCond
  Type: AWS::EC2::VPCGatewayAttachment
  Properties:
    VpcId: !Ref VPC
    InternetGatewayId: !Ref InternetGateway

# --------------------------------------------------------------------------------
# Public subnets – two by default (expand for more)
# --------------------------------------------------------------------------------
PublicSubnet0:
  Type: AWS::EC2::Subnet
  Properties:
    VpcId:            !Ref VPC
    CidrBlock:        !Select [0, !Ref PublicSubnetCidrs]
    AvailabilityZone: !Select [0, !Ref AvailabilityZones]
    MapPublicIpOnLaunch: !Condition CreateIgwCond
    Tags:
      - Key: Name
        Value: !Sub "${NamePrefix}-public-subnet-1"
      - Fn::If:
        - HasClusterName
        - { Key: !Sub "kubernetes.io/cluster/${ClusterName}", Value: shared }
        - { Ref: "AWS::NoValue" }
      - Fn::ImportValue: !Ref Tags

PublicSubnet1:
  Type: AWS::EC2::Subnet
  Properties:
    VpcId:            !Ref VPC
    CidrBlock:        !Select [1, !Ref PublicSubnetCidrs]
    AvailabilityZone: !Select [1, !Ref AvailabilityZones]
    MapPublicIpOnLaunch: !Condition CreateIgwCond
    Tags:
      - Key: Name
        Value: !Sub "${NamePrefix}-public-subnet-2"
      - Fn::If:
        - HasClusterName
        - { Key: !Sub "kubernetes.io/cluster/${ClusterName}", Value: shared }
        - { Ref: "AWS::NoValue" }
      - Fn::ImportValue: !Ref Tags

# Public route table + default route (conditional on IGW)
PublicRouteTable:
  Type: AWS::EC2::RouteTable
  Properties:
    VpcId: !Ref VPC
    Tags:
      - Key: Name
        Value: !Sub "${NamePrefix}-public-rt"
      - Fn::ImportValue: !Ref Tags

PublicRoute:
  Condition: CreateIgwCond
  Type: AWS::EC2::Route
  DependsOn: IgwAttachment
  Properties:
    RouteTableId: !Ref PublicRouteTable
    DestinationCidrBlock: 0.0.0.0/0
    GatewayId: !Ref InternetGateway

RtAssoc0:
  Type: AWS::EC2::RouteTableAssociation
  Properties:
    SubnetId:     !Ref PublicSubnet0
    RouteTableId: !Ref PublicRouteTable

RtAssoc1:
  Type: AWS::EC2::RouteTableAssociation
  Properties:
    SubnetId:     !Ref PublicSubnet1
    RouteTableId: !Ref PublicRouteTable

# --------------------------------------------------------------------------------
# Optional VPC Flow Logs
# --------------------------------------------------------------------------------
FlowLogGroup:
  Condition: UseFlowLogs
  Type: AWS::Logs::LogGroup
  Properties:
    LogGroupName: !Sub "/aws/vpc/${NamePrefix}-flow-logs-${AWS::StackName}"
    RetentionInDays: !Ref FlowLogsRetentionDays
    Tags: !ImportValue Tags

FlowLogRole:
  Condition: UseFlowLogs
  Type: AWS::IAM::Role
  Properties:
    AssumeRolePolicyDocument:
      Version: "2012-10-17"
      Statement:
        - Effect: Allow
          Principal: { Service: vpc-flow-logs.amazonaws.com }
          Action: sts:AssumeRole
    Path: /
    Tags: !ImportValue Tags

FlowLogRolePolicy:
  Condition: UseFlowLogs
  Type: AWS::IAM::Policy
  Properties:
    PolicyName: !Sub "${NamePrefix}-flow-log-policy"
    Roles: [ !Ref FlowLogRole ]
    PolicyDocument:
      Version: "2012-10-17"
      Statement:
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: "*"

VpcFlowLog:
  Condition: UseFlowLogs
  Type: AWS::EC2::FlowLog
  Properties:
    ResourceType: VPC
    ResourceId:   !Ref VPC
    TrafficType:  ALL
    LogDestinationType: cloud-watch-logs
    LogGroupName: !Ref FlowLogGroup
    DeliverLogsPermissionArn: !GetAtt FlowLogRole.Arn
    Tags:
      - Key: Name
        Value: !Sub "${NamePrefix}-flow-log"
      - Fn::ImportValue: !Ref Tags

###############################################################################
# Outputs – full parity with outputs.tf
###############################################################################
Outputs:
  VpcId:
    Value: !Ref VPC
    Export: { Name: !Sub "${AWS::StackName}-VpcId" }

  VpcCidr:
    Value: !Ref VpcCidr
    Export: { Name: !Sub "${AWS::StackName}-VpcCidr" }

  PublicSubnetIds:
    Value: !Join [",", [ !Ref PublicSubnet0, !Ref PublicSubnet1 ]]
    Export: { Name: !Sub "${AWS::StackName}-PublicSubnetIds" }

  PublicSubnetCidrs:
    Value: !Join [",", !Ref PublicSubnetCidrs]
    Export: { Name: !Sub "${AWS::StackName}-PublicSubnetCidrs" }

  InternetGatewayId:
    Condition: CreateIgwCond
    Value: !Ref InternetGateway
    Export: { Name: !Sub "${AWS::StackName}-InternetGatewayId" }

  PublicRouteTableId:
    Value: !Ref PublicRouteTable
    Export: { Name: !Sub "${AWS::StackName}-PublicRouteTableId" }