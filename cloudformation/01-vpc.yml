AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Purple – Core VPC (converted 1-for-1 from Terraform module).

###############################################################################
# Parameters – mirrors variables.tf
###############################################################################
Parameters:
  NamePrefix:
    Type: String
    Default: purple
    Description: Prefix for all resource names

  VpcCidr:
    Type: String
    Default: "10.0.0.0/16"
    Description: CIDR block for the VPC

  PublicSubnetCidrs:
    Type: CommaDelimitedList
    Default: "10.0.1.0/24,10.0.2.0/24"
    Description: >-
      Comma-delimited CIDRs for public subnets (must match AZ order).

  AvailabilityZones:
    Type: List<AWS::EC2::AvailabilityZone::Name>
    Default:  "us-east-2a,us-east-2b"
    Description: Two AZ names for the public subnets

  CreateIgw:
    Type: String
    AllowedValues: ["true","false"]
    Default: "true"
    Description: Whether to create an Internet Gateway

  EnableFlowLogs:
    Type: String
    AllowedValues: ["true","false"]
    Default: "true"
    Description: Whether to enable VPC Flow Logs

  FlowLogsRetentionDays:
    Type: Number
    Default: 30
    Description: Retention days for VPC Flow Logs

  EnableDnsHostnames:
    Type: String
    AllowedValues: ["true","false"]
    Default: "true"
    Description: Whether to enable DNS hostnames in the VPC

  EnableDnsSupport:
    Type: String
    AllowedValues: ["true","false"]
    Default: "true"
    Description: Whether to enable DNS support in the VPC

  ClusterName:
    Type: String
    Default: ""
    Description: >-
      If non-empty, will apply the
      kubernetes.io/cluster/<ClusterName>=shared tag to the VPC & subnets.

###############################################################################
# Conditions
###############################################################################
Conditions:
  CreateIgwCond:  !Equals [ !Ref CreateIgw, "true" ]
  UseFlowLogs:    !Equals [ !Ref EnableFlowLogs, "true" ]
  HasClusterName: !Not    [ !Equals [ !Ref ClusterName, "" ] ]

###############################################################################
# Resources
###############################################################################
Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:        !Ref VpcCidr
      EnableDnsHostnames: !Ref EnableDnsHostnames
      EnableDnsSupport:   !Ref EnableDnsSupport
      Tags:
        - Key: Name
          Value: !Sub "${NamePrefix}-vpc"
        - Fn::If:
            - HasClusterName
            - Key: !Sub "kubernetes.io/cluster/${ClusterName}"
              Value: shared
            - Ref: AWS::NoValue

  InternetGateway:
    Condition: CreateIgwCond
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${NamePrefix}-igw"

  IgwAttachment:
    Condition: CreateIgwCond
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:             !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet0:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:               !Ref VPC
      CidrBlock:           !Select [ 0, !Ref PublicSubnetCidrs ]
      AvailabilityZone:    !Select [ 0, !Ref AvailabilityZones ]
      MapPublicIpOnLaunch: !If [ CreateIgwCond, true, false ]
      Tags:
        - Key: Name
          Value: !Sub "${NamePrefix}-public-subnet-1"
        - Fn::If:
            - HasClusterName
            - Key: !Sub "kubernetes.io/cluster/${ClusterName}"
              Value: shared
            - Ref: AWS::NoValue

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:               !Ref VPC
      CidrBlock:           !Select [ 1, !Ref PublicSubnetCidrs ]
      AvailabilityZone:    !Select [ 1, !Ref AvailabilityZones ]
      MapPublicIpOnLaunch: !If [ CreateIgwCond, true, false ]
      Tags:
        - Key: Name
          Value: !Sub "${NamePrefix}-public-subnet-2"
        - Fn::If:
            - HasClusterName
            - Key: !Sub "kubernetes.io/cluster/${ClusterName}"
              Value: shared
            - Ref: AWS::NoValue

  PublicRouteTable:
    Condition: CreateIgwCond
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${NamePrefix}-public-rt"

  PublicRoute:
    Condition: CreateIgwCond
    Type: AWS::EC2::Route
    DependsOn: IgwAttachment
    Properties:
      RouteTableId:         !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId:            !Ref InternetGateway

  RtAssoc0:
    Condition: CreateIgwCond
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:     !Ref PublicSubnet0
      RouteTableId: !Ref PublicRouteTable

  RtAssoc1:
    Condition: CreateIgwCond
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:     !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  FlowLogGroup:
    Condition: UseFlowLogs
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:    !Sub "/aws/vpc/${NamePrefix}-flow-logs-${AWS::StackName}"
      RetentionInDays: !Ref FlowLogsRetentionDays

  FlowLogRole:
    Condition: UseFlowLogs
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - vpc-flow-logs.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"

  FlowLogRolePolicy:
    Condition: UseFlowLogs
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${NamePrefix}-flow-log-policy"
      Roles:
        - !Ref FlowLogRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: "*"

  VpcFlowLog:
    Condition: UseFlowLogs
    Type: AWS::EC2::FlowLog
    Properties:
      ResourceType:           VPC
      ResourceId:             !Ref VPC
      TrafficType:            ALL
      LogDestinationType:     cloud-watch-logs
      LogDestination:         !GetAtt FlowLogGroup.Arn
      DeliverLogsPermissionArn: !GetAtt FlowLogRole.Arn
      Tags:
        - Key: Name
          Value: !Sub "${NamePrefix}-flow-log"

###############################################################################
# Outputs – full parity with outputs.tf
###############################################################################
Outputs:
  VpcId:
    Description: "VPC ID"
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VpcId"

  VpcCidr:
    Description: "VPC CIDR"
    Value: !Ref VpcCidr
    Export:
      Name: !Sub "${AWS::StackName}-VpcCidr"

  PublicSubnetIds:
    Description: "Public Subnet IDs"
    Value: !Join [ ",", [ !Ref PublicSubnet0, !Ref PublicSubnet1 ] ]
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnetIds"

  PublicSubnetCidrs:
    Description: "Public Subnet CIDRs"
    Value: !Join [ ",", !Ref PublicSubnetCidrs ]
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnetCidrs"

  InternetGatewayId:
    Condition: CreateIgwCond
    Description: "Internet Gateway ID"
    Value: !Ref InternetGateway
    Export:
      Name: !Sub "${AWS::StackName}-InternetGatewayId"

  PublicRouteTableId:
    Condition: CreateIgwCond
    Description: "Public Route Table ID"
    Value: !Ref PublicRouteTable
    Export:
      Name: !Sub "${AWS::StackName}-PublicRouteTableId"