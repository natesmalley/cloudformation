AWSTemplateFormatVersion: 2010-09-09
Description: >
  Purple-Demo – EKS cluster with SageMaker ACK controller (atomic Helm),
  cleanup Job, and DVWA-ready node group – single-template version.

Parameters:
  StaticAssetsBucket:
    Description: (Optional) Bucket for static assets that live outside of the pipeline (e.g. data for seeding)
    Type: String
    Default: "logbuckettodah"

  StaticAssetsKeyPrefix:
    Description: (Optional) Bucket prefix for static assets that live outside of the pipeline (e.g. data for seeding)
    Type: String
    Default: "6f0d03eb-a398-401c-9355-9d93d05381ef/"

  ClusterName:
    Type: String
    Default: purple-demo
  NodeInstanceType:
    Type: String
    Default: t3.medium
  NodeDesiredCapacity:
    Type: Number
    Default: 3
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
  EksVersion:
    Type: String
    Default: "1.32"

  LatestAmiId:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64"

Mappings:
  SubnetConfig:
    PublicA:  { Cidr: "10.0.0.0/24", AZSuffix: "a" }
    PublicB:  { Cidr: "10.0.1.0/24", AZSuffix: "b" }
    PrivateA:  { Cidr: "10.0.10.0/24", AZSuffix: "a" }
    PrivateB:  { Cidr: "10.0.11.0/24", AZSuffix: "b" }

Resources:
# ---------------------------------------------------------------------------
# VPC with two AZs, 1 NAT GW
# ---------------------------------------------------------------------------
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags: [{ Key: Name, Value: !Sub '${ClusterName}-Vpc' }]

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachIg:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Create four subnets + associations
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Join 
        - ''
        - - !Ref 'AWS::Region'
          - !FindInMap [ SubnetConfig, PublicA, AZSuffix ]
      CidrBlock:  !FindInMap [ SubnetConfig, PublicA, Cidr ]
      MapPublicIpOnLaunch: true
      Tags: [{Key: Name, Value: !Sub '${ClusterName}-PublicA'}]
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Join ['', [ !Ref 'AWS::Region', !FindInMap [ SubnetConfig, PublicB, AZSuffix ] ] ]
      CidrBlock:  !FindInMap [ SubnetConfig, PublicB, Cidr ]
      MapPublicIpOnLaunch: true
      Tags: [{Key: Name, Value: !Sub '${ClusterName}-PublicB'}]
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Join ['', [ !Ref 'AWS::Region', !FindInMap [ SubnetConfig, PrivateA, AZSuffix ] ] ]
      CidrBlock:  !FindInMap [ SubnetConfig, PrivateA, Cidr ]
      Tags: [{Key: Name, Value: !Sub '${ClusterName}-PrivateA'}]
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Join ['', [ !Ref 'AWS::Region', !FindInMap [ SubnetConfig, PrivateB, AZSuffix ] ] ]
      CidrBlock:  !FindInMap [ SubnetConfig, PrivateB, Cidr ]
      Tags: [{Key: Name, Value: !Sub '${ClusterName}-PrivateB'}]

  PublicSubnetRouteA:  # associate
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetRouteB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable

  NatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties: { Domain: vpc }
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId:     !Ref PublicSubnetA

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: { VpcId: !Ref Vpc }
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
  PrivateSubnetRouteA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetRouteB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable

# ---------------------------------------------------------------------------
#  EKS Cluster & NodeGroup
# ---------------------------------------------------------------------------
  EksServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal: { Service: [ eks.amazonaws.com, ec2.amazonaws.com ] }
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AdministratorAccess

  NodeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ ec2.amazonaws.com ]
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AdministratorAccess
      Tags:
        - Key: Name
          Value: !Sub '${ClusterName}-NodeRole'

  EksCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name:   !Ref ClusterName
      KubernetesNetworkConfig:
        ServiceIpv4Cidr: 172.20.0.0/16
      Version: !Ref EksVersion
      ResourcesVpcConfig:
        SubnetIds:
          - !Ref PublicSubnetA
          - !Ref PublicSubnetB
          - !Ref PrivateSubnetA
          - !Ref PrivateSubnetB
      RoleArn: !GetAtt EksServiceRole.Arn
      AccessConfig:
        AuthenticationMode: API_AND_CONFIG_MAP

  NodeGroup:
    DependsOn: EksCluster
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref ClusterName
      NodegroupName: default-ng
      ScalingConfig:
        DesiredSize: !Ref NodeDesiredCapacity
        MaxSize: !Ref NodeDesiredCapacity
        MinSize: !Ref NodeDesiredCapacity
      DiskSize: 20
      InstanceTypes: [ !Ref NodeInstanceType ]
      Subnets:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
      NodeRole: !GetAtt NodeRole.Arn
      AmiType: AL2_x86_64

  ClusterAdminAccess:
    Type: AWS::EKS::AccessEntry
    DependsOn:
      - EksCluster
      - AckSageMakerFunctionRole
    Properties:
      ClusterName: !Ref ClusterName
      PrincipalArn: !GetAtt AckSageMakerFunctionRole.Arn
      Type: STANDARD
      AccessPolicies:
        - PolicyArn: arn:aws:eks::aws:cluster-access-policy/AmazonEKSAdminPolicy
          AccessScope:
            Type: cluster

  RootAccountAccess:
    Type: AWS::EKS::AccessEntry
    DependsOn:
      - EksCluster
    Properties:
      ClusterName: !Ref ClusterName
      PrincipalArn: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
      Type: STANDARD
      AccessPolicies:
        - PolicyArn: arn:aws:eks::aws:cluster-access-policy/AmazonEKSAdminPolicy
          AccessScope:
            Type: cluster

  CfnK8sExecutionRoleAccess:
    Type: AWS::EKS::AccessEntry
    DependsOn:
      - EksCluster
    Properties:
      ClusterName: !Ref ClusterName
      PrincipalArn: !GetAtt CfnK8sExecutionRole.Arn
      Type: STANDARD
      AccessPolicies:
        - PolicyArn: arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy
          AccessScope:
            Type: cluster

# ---------------------------------------------------------------------------
#  Namespace, IRSA & Cleanup Job (AWSQS::Kubernetes::Resource)
#    (AWSQS public extension “Kubernetes::Resource” replaces the older
#     Manifest type.)
# ---------------------------------------------------------------------------
#  AckSystemNamespace:
#    DependsOn:
#      - EksCluster
#      - NodeGroup
#      - ClusterAdminAccess
#      - RootAccountAccess
#      - CfnK8sExecutionRoleAccess
#    Type: AWSQS::Kubernetes::Resource
#    Properties:
      # AWSQS::Kubernetes::Resource expects Manifest as a single YAML/JSON
      # string, not a YAML array.  Use block scalar (|) to embed it.
#      ClusterName: !Ref ClusterName
#      Manifest: |
#        apiVersion: v1
#        kind: Namespace
#        metadata:
#          name: ack-system

# ---------------------------------------------------------------------------
#  OIDC provider (discovered from the cluster) and IRSA role for ACK controller
# ---------------------------------------------------------------------------
  OidcProvider:
    Type: AWS::IAM::OIDCProvider
    Properties:
      Url: !GetAtt EksCluster.OpenIdConnectIssuerUrl
      ClientIdList: [ sts.amazonaws.com ]
      ThumbprintList: [ 9e99a48a9960b14926bb7f3b02e22da0cedb8061 ] # Amazon Root CA1

  SageMakerIrsaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal: { Federated: !Ref OidcProvider }
          Action: sts:AssumeRoleWithWebIdentity
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess

#  SageMakerServiceAccount:
#    Type: AWSQS::Kubernetes::Resource
#    DependsOn:
#      - EksCluster
#      - NodeGroup
#      #- AckSystemNamespace
#      - ClusterAdminAccess
#      - RootAccountAccess
#      - CfnK8sExecutionRoleAccess
#    Properties:
#      ClusterName: !Ref ClusterName
#      Manifest: !Sub |
#        apiVersion: v1
#        kind: ServiceAccount
#        metadata:
#          name: ack-sagemaker-controller
#          namespace: ack-system
#          annotations:
#            eks.amazonaws.com/role-arn: ${SageMakerIrsaRole.Arn}

# ---------------------------------------------------------------------------
#  Lambda‑backed custom resource that installs / removes the SageMaker ACK
#  controller via Helm (replaces deprecated AWSQS::Kubernetes::Helm type)
# ---------------------------------------------------------------------------

  AckSageMakerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CFN-Registry-ExecRole        # single role reused by CFN handler
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal: { Service: [ lambda.amazonaws.com ] }
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: EksHelmAccess
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - eks:DescribeCluster
              - eks:AccessKubernetesApi
            Resource: "*"
          - Effect: Allow
            Action: iam:PassRole
            Resource: "*"     # restrict in prod

  # NEW – execution role for AWSQS::Kubernetes::Resource
  CfnK8sExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CFN-K8s-ExecutionRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - resources.cloudformation.amazonaws.com
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AdministratorAccess
      Policies:
        - PolicyName: AllowEKSAccess
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeSubnets
                  - ec2:DescribeVpcs
                  - eks:AccessKubernetesApi
                  - eks:DescribeCluster
                  - lambda:CreateFunction
                  - lambda:DeleteFunction